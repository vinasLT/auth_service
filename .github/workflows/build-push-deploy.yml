name: Optimized CI/CD Pipeline
on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run tests
        run: |
          echo "Running tests..."
          poetry run pytest || ([ $? -eq 5 ] && echo "‚ö†Ô∏è No tests found - continuing anyway" || exit $?)

  # –°–±–æ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –¥–ª—è AMD64
  build-amd64:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push AMD64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:amd64-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:amd64-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:buildcache-amd64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:buildcache-amd64,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # –ù–∞—Ç–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ ARM64 –Ω–∞ ARM —Ä–∞–Ω–Ω–µ—Ä–∞—Ö (–ù–ê–ú–ù–û–ì–û –ë–´–°–¢–†–ï–ï!)
  build-arm64:
    needs: test
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π ARM —Ä–∞–Ω–Ω–µ—Ä –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
    # –í–∞–∂–Ω–æ: –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –Ω—É–∂–Ω–∞ –ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ Team/Enterprise
    runs-on: ubuntu-24.04-arm  # –∏–ª–∏ ubuntu-22.04-arm
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push ARM64 (Native)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          # –ù–∞—Ç–∏–≤–Ω–∞—è —Å–±–æ—Ä–∫–∞ - –Ω–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å platforms, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–Ω–Ω–µ—Ä–∞
          platforms: linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:arm64-latest
            ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:arm64-${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:buildcache-arm64
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:buildcache-arm64,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  # –°–æ–∑–¥–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–≥–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
  create-manifest:
    needs: [build-amd64, build-arm64]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create and push multi-arch manifest
        run: |
          # –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è latest
          docker manifest create \
            ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:amd64-latest \
            ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:arm64-latest
          
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:latest
          
          # –°–æ–∑–¥–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ SHA
          docker manifest create \
            ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:${{ github.sha }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:amd64-${{ github.sha }} \
            ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:arm64-${{ github.sha }}
          
          docker manifest push ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:${{ github.sha }}

  deploy:
    needs: create-manifest
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy on server via SSH
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -x
            echo "üîÅ Pulling latest Docker image..."
            # –¢–µ–ø–µ—Ä—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç—è–Ω–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/vinaslt_auth_service:latest
            
            echo "üì¶ Composing up..."
            cd /srv/vinaslt/deploy_conf
            docker compose up -d --build
            
            echo "‚úÖ Deployment complete!"